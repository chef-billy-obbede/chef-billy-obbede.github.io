<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-03-06T09:01:25+03:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Chef Billy</title><subtitle></subtitle><entry><title type="html">Ugali Matumbo</title><link href="http://localhost:4000/recipes/2022/03/02/ugali-matumbo.html" rel="alternate" type="text/html" title="Ugali Matumbo" /><published>2022-03-02T13:36:44+03:00</published><updated>2022-03-02T13:36:44+03:00</updated><id>http://localhost:4000/recipes/2022/03/02/ugali-matumbo</id><content type="html" xml:base="http://localhost:4000/recipes/2022/03/02/ugali-matumbo.html"><![CDATA[<p class="hidden">

You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

</p>

<p style="background-color: #eef; padding: 8px; font-family: helvetica; border-radius: 4px;">

Jekyll requires blog post files to be named according to the following format:

</p>

<p><br />
<br /></p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p style="display: none;">

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>



</p>

<h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">What</span> <span class="n">you</span> <span class="n">will</span> <span class="n">need</span></code></pre></figure>



</h2>]]></content><author><name></name></author><category term="recipes" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Chapo Stew</title><link href="http://localhost:4000/recipes/2022/03/02/chapo-stew.html" rel="alternate" type="text/html" title="Chapo Stew" /><published>2022-03-02T13:36:44+03:00</published><updated>2022-03-02T13:36:44+03:00</updated><id>http://localhost:4000/recipes/2022/03/02/chapo-stew</id><content type="html" xml:base="http://localhost:4000/recipes/2022/03/02/chapo-stew.html"><![CDATA[<p class="hidden">

You’ll find this post in your `_posts` directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run `jekyll serve`, which launches a web server and auto-regenerates your site when a file is updated.

</p>

<p style="backgrosund-color: #eef; padding: 8px; font-family: helvetica;">

Jekyll requires blog post files to be named according to the following format:

</p>

<p><br />
<br /></p>

<p><code class="language-plaintext highlighter-rouge">YEAR-MONTH-DAY-title.MARKUP</code></p>

<p style="display: none;">

Where `YEAR` is a four-digit number, `MONTH` and `DAY` are both two-digit numbers, and `MARKUP` is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.

Jekyll also offers powerful support for code snippets:


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>



</p>

<h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">What</span> <span class="n">you</span> <span class="n">will</span> <span class="n">need</span></code></pre></figure>



</h2>]]></content><author><name></name></author><category term="recipes" /><summary type="html"><![CDATA[]]></summary></entry></feed>